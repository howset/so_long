
NAME    = project_name
INC     = /usr/local/include# could be /usr/include depending on your OS
INCFT   = ./libft/include# header from libft
LIBFT   = ./libft# path to libft library
LIBMLX  = /usr/local/lib# could be /usr/lib, depends on where you decided to put your mlx library
UNAME   := $(shell uname)# get the OS name, this will help define behaviors for certain OS's
CFLAGS  = -Wall -Werror -Wextra -O3 -g -I$(INC) -I${INCFT} -Iinclude# C Flags (gcc) & linking. "-Iinclude" if you created the folder "include" to put your project headers"
LFLAGS  = -L$(LIBMLX) -lmlx -L${LIBFT} -lft# if you decided to install libmlx.a locally you don't need "-L$(LIBMLX) -lmlx" the school also has it locally as well...
SRC     = $(wildcard src/*.c)# list your source files
OBJ     = $(SRC:%.c=%.o)# convert source files to binary list

This is how Makefile should look like
OBJS = $(SRC:.c=.o)
MLX_LIB = mlx/
MLX_FLAGS = -Lmlx -lmlx -L/usr/lib/X11 -lXext -lX11
all: $(NAME)
$(NAME): $(OBJS)
	@if [ ! -d "mlx" ]; then \
	git clone https://github.com/42Paris/minilibx-linux.git mlx; \
	fi
	@make -C $(MLX_LIB)
	$(CC) $(CFLAGS) $(OBJS) $(GETNEXTLINE) $(MLX_FLAGS) -o $(NAME)

-Lminilibx-linux (note the capital L) means they must be a folder called minilibx-linux. the -lmlx_linux (lowercase l) requires you to have a file called libmlx_linux.a inside of the aforementioned folder. Make sure you meet those requirements. You can get rid of the -lmlx flag if you already have a file called libmlx_linux.a inside of the minilibx-linux folder. If you do not have that file in there, but a file called libmlx.a (note the missing _linux), then you can get rid of the -lmlx_linux flag and keep the -lmlx flag.
Also, I don't know if it makes a difference, but maybe ensure that the last flags (very end of your command) are -lX11 -lXext -lm
I do not know why you need the -lz flag, at least I didn't need it for fract-ol.

MLXFLAGS			= -L./lib/minilibx-linux -llibmlx -Ilmlx -lbsd -lXext -lX11 -lm